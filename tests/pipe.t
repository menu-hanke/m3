-- vim: ft=lua

test("pipe:empty", function()
	local empty = pipe()
	simulate(empty)
end)

test("pipe:single-consumer", function()
	local t = tab()
	local r = read(t)
	local p = pipe()
	local w = write(p)
	connect(p, t)
	simulate(function()
		w(1) w(2)
		local v = r()
		assert(v[1] == 1 and v[2] == 2)
	end)
end)

test("pipe:multi-consumer", function()
	local tab1, tab2 = tab(), tab()
	local p = pipe()
	local w = write(p)
	local r = read(tab1, tab2)
	connect(p, tab1)
	connect(p, tab2)
	simulate(function()
		w(1) w(2)
		local t1, t2 = r()
		assert(t1[1] == 1 and t1[2] == 2)
		assert(t2[1] == 1 and t2[2] == 2)
	end)
end)

test("pipe:map", function()
	local tab1 = tab()
	local p = pipe():map(function(x) return -x end)
	connect(p, tab1)
	local w = write(p)
	local r = read(tab1)
	simulate(function()
		w(1) w(2)
		local t = r()
		assert(t[1] == -1 and t[2] == -2)
	end)
end)

test("pipe:filter", function()
	local tab1 = tab()
	local p = pipe():filter(function(x) return x%2 == 1 end)
	connect(p, tab1)
	local w = write(p)
	local r = read(tab1)
	simulate(function()
		w(1) w(2) w(3)
		local v = r()
		assert(v[1] == 1 and v[2] == 3)
	end)
end)

test("pipe:recursion", function()
	local tab1 = tab()
	local p1 = pipe()
	local p2 = pipe():filter(function(x) return x < 10 end)
	local p3 = pipe():filter(function(x) return x > 5 end)
	local p4 = pipe():map(function(x) return x+1 end)
	connect(p1, p3)
	connect(p3, tab1)
	connect(p1, p2)
	connect(p2, p4)
	connect(p4, p1)
	local w1 = write(p1)
	local r1 = read(tab1)
	simulate(function()
		w1(1)
		local t = r1()
		assert(
			t[1] == 6
			and t[2] == 7
			and t[3] == 8
			and t[4] == 9
			and t[5] == 10
			and t[6] == nil
		)
	end)
end)
